<source>
  @type tail
  format none
  path /opt/app/log/development.log
  pos_file positions.pos
  tag single.applogs.*
  path_key filename
</source>

<match single.applogs.**>
  @type record_reformer
  tag multiline.${tag_suffix[1]}
  renew_record false
  enable_ruby true
  remove_keys message
  <record>
    request_id ${record['message'].scan(/^., \[.+\] (.+) --: \[(?<request_id>[^ ]+)\]/).flatten.compact[0]}
    log_line ${record['message'].gsub(/^$\n/, '')}
  </record>
</match>

<filter multiline.**>
   @type concat
   key log_line
   multiline_start_regexp /^(E|F), \[[^ ]+ \#\d+\]( )+[^ ]+ -- :/
   continuous_line_regexp /^(?!(^., \[[^ ]+ \#\d+\]( )+[^ ]+ -- :)).+/
   flush_interval 60
   timeout_label @MULTILINE_LOGS
</filter>

<filter multiline.**>
  @type concat
  key log_line
  stream_identity_key request_id
  multiline_start_regexp /^I, \[.+\]  INFO -- : \[.+\] Started.+for.+at.+/
  multiline_end_regexp /^I, \[.+\]  INFO -- : \[.+\] Completed.+/
  flush_interval 60
  timeout_label @MULTILINE_LOGS
</filter>

<match multiline.**>
  @type record_reformer
  tag publish.applogs.${tag_suffix[2]}
  renew_record false
  enable_ruby true
  remove_keys log_line
  <record>
    request_start_time ${record['log_line'].scan(/\[(?<param>[^ ]+) \#\d+\]  [^ ]+ -- : (\[[^ ]+\] )+Started/).flatten.compact[0]}
    log_level ${record['log_line'].scan(/^(I|F|D|W|E), \[[^ ]+ \#\d+\]( )+(?<param>[^ ]+) -- :/).flatten.compact.sort.first}
    request_id ${record['log_line'].scan(/^., \[.+\] (.+) --: \[(?<request_id>[^ ]+)\]/).flatten.compact[0]}
    request_method ${record['log_line'].scan(/\[[^ ]+ \#\d+\]  [^ ]+ -- : (\[[^ ]+\] )+Started (?<param>[^ ]+) [^ ]+ for/).flatten.compact[0]}
    request_path ${record['log_line'].scan(/Started [^ ]+ "(?<param>[^ ]+)" for/).flatten.compact[0]}
    request_host_ip ${record['log_line'].scan(/Started [^ ]+ "[^ ]+" for (?<param>[^ ]+)/).flatten.compact[0]}
    request_start_time_rails ${record['log_line'].scan(/Started [^ ]+ "[^ ]+" for [^ ]+ at (?<param>[^ ]+ [^ ]+ [^\n]+)\n/).flatten.compact[0]}
    request_controller ${record['log_line'].scan(/Processing by (?<param>[^\#]+)\#/).flatten.compact[0]}
    request_controller_method ${record['log_line'].scan(/Processing by [^ ]+\#(?<param>[^ ]+) as/).flatten.compact[0]}
    request_format ${record['log_line'].scan(/Processing by [^ ]+\#[^ ]+ as (?<param>[^\n]+)\n/).flatten.compact[0]}
    request_parameters ${record['log_line'].scan(/(  Parameters: (?<param>[^\n]+))?/).flatten.compact[0]}
    response_code ${record['log_line'].scan(/[^ ]+ -- : (\[[^ ]+\] )+Completed (?<param>\d+) /).flatten.compact[0]}
    request_runtime ${record['log_line'].scan(/(\[[^ ]+\] )+Completed \d+ ([^ ]+ )+in (?<param>[\d\.]+)ms/).flatten.compact[0]}
    request_view_runtime ${record['log_line'].scan(/Completed \d+ ([^ ]+ )+in [\d\.]+ms \(Views: (?<param>[\d\.]+)ms/).flatten.compact[0]}
    request_end_time ${record['log_line'].scan(/\[(?<param>[^ ]+) \#\d+\]  [^ ]+ -- : (\[[^ ]+\] )+Completed/).flatten.compact[0]}
    exception ${(!record['log_line'].scan(/.+(\.|e)rb:\d+:in `.+'$/).flatten.compact[0].nil?).to_s}
    message ${record['log_line'] }
  </record>
</match>

<match publish.applogs.**>
  @type loki
  url "http://192.168.29.252:3100"
  flush_interval 1s
  flush_at_shutdown true
  buffer_chunk_limit 1m
  extra_labels {"job":"applogs", "host":"ward_workstation", "agent":"fluentd"}
  <label>
      filename
  </label>
</match>

